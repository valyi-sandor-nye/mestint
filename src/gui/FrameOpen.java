package gui;

import business_logic.Model;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/** In this windows the user can ask a list of existing names for saved tables, pick one 
 * and open it by the "Open" button.
 *
 * @author valyis
 */
public class FrameOpen extends javax.swing.JFrame {

    private FrameEditing mainFrame;
    Connection con;
    Model model;

    /** The constructor gets two parameters. The parentframe is the windows that the frame  returns back to,
     * the model is the table, practically.
     * It initializes the graphical widgets, and queries the existig saved tables into a table.    
    */
    public FrameOpen(FrameEditing parentFrame, Model model) {
        initComponents();
        this.mainFrame = parentFrame;
        this.model = model;
        Statement st = null;
        ResultSet rs = null;
        setEnabled(true);
        setVisible(true);
        try {
            Class.forName("org.mariadb.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger("foxandhounds").severe("nincs meg az adatbázis-driver");
        }

        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/mibead2021", "root", "");
            st = con.createStatement();
            rs = st.executeQuery("SELECT * FROM FoxAndHounds WHERE 1");
            DefaultTableModel tmodel = (DefaultTableModel) TablePane.getModel();
            while (rs.next()) {
                tmodel.addRow(new Object[]{rs.getString("name"), rs.getString("position")});
            }
            TablePane.setPreferredSize(null);
            TablePane.setModel(tmodel);
        } catch (SQLException hiba) {
            System.out.println("Nem sikerült csatlakozni az adatbázishoz\n" + hiba);
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    System.out.println("Nem sikerült lezárni az adb-t");
                }
            }
        }

        /**
         * This method is called from within the constructor to initialize the
         * form. WARNING: Do NOT modify this code. The content of this method is
         * always regenerated by the Form Editor.
         */
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TableScrollPane = new javax.swing.JScrollPane();
        TablePane = new javax.swing.JTable();
        ButtonOpen = new javax.swing.JButton();
        ButtonBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Open Position");
        setAlwaysOnTop(true);

        TablePane.setAutoCreateRowSorter(true);
        TablePane.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Position"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablePane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablePaneMouseClicked(evt);
            }
        });
        TableScrollPane.setViewportView(TablePane);

        ButtonOpen.setText("Open");
        ButtonOpen.setEnabled(false);
        ButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonOpenActionPerformed(evt);
            }
        });

        ButtonBack.setText("Back");
        ButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(TableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ButtonOpen, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonOpen)
                    .addComponent(ButtonBack))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void ButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonOpenActionPerformed
        String xmlString = TablePane.getValueAt(TablePane.getSelectedRow(),1).toString();
        model.loadFromXML(xmlString);
        mainFrame.refreshGUIFromModel();
        mainFrame.setVisible(true);
        setVisible(false);
        

    }//GEN-LAST:event_ButtonOpenActionPerformed

    private void TablePaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablePaneMouseClicked
        ButtonOpen.setEnabled(true);
    }//GEN-LAST:event_TablePaneMouseClicked

    private void ButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBackActionPerformed
        mainFrame.setEnabled(true);
        setVisible(false);
        dispose();
    }//GEN-LAST:event_ButtonBackActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonBack;
    private javax.swing.JButton ButtonOpen;
    private javax.swing.JTable TablePane;
    private javax.swing.JScrollPane TableScrollPane;
    // End of variables declaration//GEN-END:variables
}
